beta =  matrix(NA, ncol = R, nrow = 3)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = ifelse(y[i] > 0,
rtruncnorm(mean = x[i,]%*%beta_n[i,r-1],sd = 1, a = 0, b = Inf),
rtruncnorm(mean = x[i,]%*%beta_n[i,r-1],sd = 1, a = -Inf, b = 0))
}
beta_n[,r] = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n[r,], sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
probit_beta = probit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
probit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = ifelse(y[i] > 0,
rtruncnorm(mean = x[i,]%*%beta_n[,r-1],sd = 1, a = 0, b = Inf),
rtruncnorm(mean = x[i,]%*%beta_n[,r-1],sd = 1, a = -Inf, b = 0))
}
beta_n[,r] = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n[r,], sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
probit_beta = probit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
y
X
install.packages("BayesLogit")
library(BayesLogit)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, x[i,] %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
probit_beta = probit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
probit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
beta
beta = c(1,1,1)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta = c(1,1,1)
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(1,1,1)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
beta
beta[,1]
beta[,1]
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(1,1,1)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(1,1,1)
for(r in 1:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(1,1,1)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[r, ] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(1,1,1)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[, r] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(2,2,2)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[, r] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
beta[,1] = c(5, 6, 1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(5, 6, 1)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[, r] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
?rpg.devroye()
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
s_n = solve(solve(S_0)+crossprod(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(5, 6, 1)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, 1, t(x[i,]) %*% beta[,r-1])
}
beta_n = s_n%*%(solve(S_0)%*%beta_0+t(X)%*%v[,r])
beta[, r] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
logit_beta
logit_beta[,1]
logit_beta[,2]
logit_beta[,6]
library(coda)
traceplot(logit_beta[1,])
traceplot(as.mcmc(logit_beta[1,]))
traceplot(as.mcmc(logit_beta[1,200:2000]))
traceplot(as.mcmc(logit_beta[1,200:2000]), main = 'Beta_1')
par(mfrow=c(3,1))
traceplot(as.mcmc(logit_beta[1,200:2000]), main = 'Beta_1')
traceplot(as.mcmc(logit_beta[2,200:2000]), main = 'Beta_2')
traceplot(as.mcmc(logit_beta[3,200:2000]), main = 'Beta_3')
}
}
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(5, 6, 1)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, 1, t(x[i,]) %*% beta[,r-1])
}
V = diag(v[,r])
s_n = solve(solve(S_0)+t(x) %*% V %*% x)
beta_n = s_n%*%(t(x) %*% (y-0.5)+solve(S_0)%*%beta_0
beta[, r] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(5, 6, 1)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, 1, t(x[i,]) %*% beta[,r-1])
}
V = diag(v[,r])
s_n = solve(solve(S_0)+t(x) %*% V %*% x)
beta_n = s_n%*%(t(x) %*% (y-0.5)+solve(S_0)%*%beta_0
beta[, r] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
logit_gibbs = function(x, beta_0, S_0, y, R){
beta_n = matrix(NA, ncol = R, nrow = 3)
v = matrix(NA, ncol = R, nrow = nrow(x))
beta =  matrix(NA, ncol = R, nrow = 3)
beta[,1] = c(5, 6, 1)
for(r in 2:R){
for(i in 1:nrow(x)){
v[i,r] = rpg.devroye(1, 1, t(x[i,]) %*% beta[,r-1])
}
V = diag(v[,r])
s_n = solve(solve(S_0)+t(x) %*% V %*% x)
beta_n = s_n%*%(t(x) %*% (y-0.5)+solve(S_0)%*%beta_0)
beta[, r] = mvtnorm::rmvnorm(1, mean = beta_n, sigma = s_n)
}
return(beta)
}
b_0 = c(-1,-1,1)
S_0 = diag(1, 3)
logit_beta = logit_gibbs(R = 2000, y = y, S_0 = S_0, beta_0 = b_0,x = X)
library(coda)
par(mfrow=c(3,1))
traceplot(as.mcmc(logit_beta[1,200:2000]), main = 'Beta_1')
traceplot(as.mcmc(logit_beta[2,200:2000]), main = 'Beta_2')
traceplot(as.mcmc(logit_beta[3,200:2000]), main = 'Beta_3')
summary(as.mcmc(logit_beta[1,200:2000]))
qt(0.975,12)
qt(0.025,12)
2*(1-pt(0.606,12))
2*(1-pt(2.16,13))
qf(0.95,1,13)
2*(1-pt(2.07,60))
2*(1-pt(0.94,60Ã¹))
2*(1-pt(0.94,60))
1-pf(0.87, 1, 60)
1-pf(10.21,1,80)
2*(1-pt(0.82,80))
qt(0.999,80)
library(label.switching)
library(mcclust.ext)
library(mcclust)
library(Rcpp)
library(RcppArmadillo)
library(poLCA)
library(aricode)
library(cluster)
library(Rmixmod)
library(MBCbook)
library(FactoMineR)
library(proxy)
library(label.switching)
library(abind)
library(klaR)
library(future.apply)
library(coda)
library(tidyv)
library(tidyverse)
setwd("G:/My Drive/UniversitÃ /Magistrale/Tesi/Studio di simulazione/Funzioni")
Rcpp::sourceCpp("tp_thesis_cpp_function.cpp")
Rcpp::sourceCpp("tp_gbpp_thesis.cpp")
Rcpp::sourceCpp("tp_tuning.cpp")
Rcpp::sourceCpp("waic_cpp.cpp")
source("tp_thesis_R_function.R")
source("tp_waic.R")
df <- read.csv("G:/My Drive/UniversitÃ /Magistrale/Tesi/Dati reali/Dati_applicazione_reale.csv", header = T)
df <- df[,-c(1,2,3)]
head(df)
str(df)
summary(df)
df_factor <- convert_to_factors(df)
str(df_factor)
summary(df_factor$Country)
levels(df_factor$Country) <- c("Norvegia", "UK", "USA", "Australia")
summary(df_factor$Gender_2cat)
levels(df_factor$Gender_2cat) <- c("Male", "Female")
levels(df_factor$Sleep_problems) <- c("No", "Si")
levels(df_factor$Sleep_problems_C19) <- c("No", "Si")
library(ggplot2)
library(patchwork)
p1 <- ggplot(df_factor, aes(x = Country, fill = Sleep_problems)) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c("Si" = "#E69F00", "No" = "#56B4E9")) +
labs(
y = "Numero di Partecipanti",
x = "Paese",
fill = "")+
theme_minimal()+
theme(legend.position = "bottom")
p2 <- ggplot(df_factor, aes(x = Country, fill = Sleep_problems_C19)) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c("Si" = "#E69F00", "No" = "#56B4E9")) +
labs(
y = "Numero di Partecipanti",
x = "Paese",
fill = "")+
theme_minimal()+
theme(legend.position = "bottom")
combined <- p1+p2
print(combined)
df_clust <- df_factor[,-c(14,15)]
str(df_clust)
df_num_clust <- df
df_num_clust[,c(1:12)] = df_num_clust[,c(1:12)]+1
df_num_clust$Infected_2cat <- df_num_clust$Infected_2cat+1
df_num_clust$SM_time <- df_num_clust$SM_time+1
df_num_clust$Gender_2cat <- df_num_clust$Gender_2cat+1
df_num_clust$Educ_2cat <- df_num_clust$Educ_2cat+1
df_num_clust$Spouse_2cat <- df_num_clust$Spouse_2cat +1
df_num_clust$Employment_2cat <- df_num_clust$Employment_2cat+1
df_num_clust$GHQ <- df_num_clust$GHQ + 1
df_num_clust <- df_num_clust %>%
dplyr::select(-Sleep_problems_C19, -Sleep_problems)
str(df_num_clust)
summary(df_num_clust)
is.na(df_num_clust)
library(Rmixmod)
res <- mixmodCluster(df_clust, nbCluster = 1:15, dataType = "qualitative", model = mixmodMultinomialModel(listModels = ),
criterion = c("ICL","BIC"))
bic = vector()
for(g in 1:15){
res <- mixmodCluster(df_clust, nbCluster = g, dataType = "qualitative", model = mixmodMultinomialModel(listModels = ),
criterion = c("BIC"))
bic[g] = res@bestResult@criterionValue
}
mj <- apply(df_num_clust, 2, max)
like <- calculate_log_likelihood_matrix_cpp(alpha_samples = gibbs_prova1$alpha, tau_samples = gibbs_prova1$tau, Y = as.matrix(df_num_clust), mj = mj)
waic_4 <- calculate_waic_cpp(log_lik_matrix = like)$waic
waic <- vector()
mj <- apply(df_num_clust, 2, max)
max_G <- 6
df_num_clust
for(g in 2:max_G){
gibbs <- gibbs_lcm_standard_cpp(Y = as.matrix(df_num_clust), G = g, niter = 20000, nburn = 5000, b = 4, c = 4, save_probs = TRUE)
n <- nrow(df_num_clust)
h <- c()
cluster = gibbs$cluster
for (i in 1:15000){
h[i] <-  H(cluster[i, ])
}
traceplot(as.mcmc(h))
like <- calculate_log_likelihood_matrix_cpp(alpha_samples = gibbs$alpha, tau_samples = gibbs$tau, Y = as.matrix(df_num_clust), mj = mj)
waic[g] <- calculate_waic_cpp(log_lik_matrix = like)$waic
gc()
}
waic
like
rm(waic)
rm(like)
mj <- apply(df_num_clust, 2, max)
waic <- vector()
mj <- apply(df_num_clust, 2, max)
max_G <- 6
for(g in 2:max_G){
gibbs <- gibbs_lcm_standard_cpp(Y = as.matrix(df_num_clust), G = g, niter = 20000, nburn = 10000, b = 4, c = 4, save_probs = TRUE)
n <- nrow(df_num_clust)
h <- c()
cluster = gibbs$cluster
for (i in 1:15000){
h[i] <-  H(cluster[i, ])
}
traceplot(as.mcmc(h))
like <- calculate_log_likelihood_matrix_cpp(alpha_samples = gibbs$alpha, tau_samples = gibbs$tau, Y = as.matrix(df_num_clust), mj = mj)
waic[g] <- calculate_waic_cpp(log_lik_matrix = like)$waic
rm(like)
gc()
}
for(g in 2:max_G){
gibbs <- gibbs_lcm_standard_cpp(Y = as.matrix(df_num_clust), G = g, niter = 20000, nburn = 10000, b = 4, c = 4, save_probs = TRUE)
n <- nrow(df_num_clust)
h <- c()
cluster = gibbs$cluster
for (i in 1:10000){
h[i] <-  H(cluster[i, ])
}
traceplot(as.mcmc(h))
like <- calculate_log_likelihood_matrix_cpp(alpha_samples = gibbs$alpha, tau_samples = gibbs$tau, Y = as.matrix(df_num_clust), mj = mj)
waic[g] <- calculate_waic_cpp(log_lik_matrix = like)$waic
rm(like)
gc()
}
waic
waic_tune <- vector()
mj <- apply(df_num_clust, 2, max)
max_G <- 6
for(g in 2:max_G){
polca_model <- poLCA(formula = as.matrix(df_num_clust)~1, data = df_num_clust, nclass = g)
param_prior <- elicit_hyperparameters_from_poLCA(lcm_poLCA_model =polca_model , data_original_factors = df_clust, prior_strength_tau = 10,
prior_strength_alpha = 10, G = g)
gibbs <- gibbs_tuning_G4 <- gibbs_lcm_standard_tune_cpp(Y = param_prior$Y_numeric_for_bayesian, G = param_prior$G, niter = 20000, nburn = 10000,
hyper_b = param_prior$hyper_b, hyper_c = param_prior$hyper_c, progress_interval = 1000)
n <- nrow(df_num_clust)
h <- c()
cluster = gibbs$cluster
for (i in 1:10000){
h[i] <-  H(cluster[i, ])
}
traceplot(as.mcmc(h))
like <- calculate_log_likelihood_matrix_cpp(alpha_samples = gibbs$alpha, tau_samples = gibbs$tau, Y = as.matrix(df_num_clust), mj = mj)
waic_tune[g] <- calculate_waic_cpp(log_lik_matrix = like)$waic
rm(like)
gc()
}
waic_tune
?binder()
dist <- dist(df_num_clust, method = "manhattan")
sil[g] <- silhouette(dist)
dist
?dist()
?silhouette
waic_tune
#Stimo i cluster
cluster_probs <- aperm(abind(gibbs$prob, along = 3), c(3,1,2))
out_std <- label.switching(method = "STEPHENS",
z = gibbs$cluster,
p = cluster_probs,
K = g)
sil[g] <- silhouette(x = out_std$clusters, dist = dist)
sil <- c()
sil[g] <- silhouette(x = out_std$clusters, dist = dist)
out_std$clusters
sil[g] <- silhouette(x = unlist(out_std$clusters), dist = dist)
sil
unlist(out_std$clusters)
dist
View(dist)
